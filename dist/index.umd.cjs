(function(f,e){typeof exports=="object"&&typeof module<"u"?e(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],e):(f=typeof globalThis<"u"?globalThis:f||self,e(f.VBreakpoints={},f.Vue))})(this,function(f,e){"use strict";const z={xs:0,sm:640,md:768,lg:1024,xl:1280,"2xl":1536},L={phone:0,tablet:768,laptop:1200,desktop:1601,largeDesktop:1921},O={install(n,o={}){let s={...z,...o.breakpoints},c={...L,...o.screens};o.override&&o.override.breakpoint&&o.breakpoints&&(s=o.breakpoints),o.override&&o.override.screen&&o.screens&&(c=o.screens);const g={...Object.fromEntries(Array.from(Object.keys(s),r=>[r,!1])),...Object.fromEntries(Array.from(Object.keys(c),r=>[r,!1]))},l=e.ref(""),v=e.ref(""),k=e.ref(0),p=e.ref(0),w=e.ref(0),y=e.ref(0),u=e.ref(null),W=e.ref(g),_=e.ref({}),m=r=>{let t="",i="";const d=window.innerWidth,h=window.innerHeight;u.value=d===h?"square":d>h?"landscape":"portrait";for(const a in s)s.hasOwnProperty(a)&&d>=s[a]&&(!t||s[a]>s[t])&&(t=a);for(const a in c)c.hasOwnProperty(a)&&d>=c[a]&&(!i||c[a]>c[i])&&(i=a);l.value=t,v.value=i,k.value=d,p.value=h,w.value=t?s[t]:0,y.value=i?c[i]:0,_.value=r,t&&i&&(W.value={...g,[t]:!0,[i]:!0})};e.watch([l,v,u],([r,t,i],[d,h,a])=>{const j={breakpoint:r,breakpointWidth:w.value,screen:t,screenWidth:y.value,orientation:i,width:k.value,height:p.value};if(r!==d){const b=new Event("breakpoint:change");b.payload=j,window.dispatchEvent(b)}if(t!==h){const b=new Event("screen:change");b.payload=j,window.dispatchEvent(b)}if(i!==a){const b=new CustomEvent("orientation:change");b.payload=j,window.dispatchEvent(b)}});const E=r=>({beforeMount(t,i){const d=h=>{i.value&&i.value(h)};r&&window.addEventListener(r,d),t.__cleanup__=()=>{r&&window.removeEventListener(r,d)}},unmounted(t){t.__cleanup__&&t.__cleanup__()}});n.directive("breakpoint-change",E("breakpoint:change")),n.directive("screen-change",E("screen:change")),n.directive("orientation-change",E("orientation:change")),n.provide("vb:breakpoints",s),n.provide("vb:screens",c),n.provide("vb:breakpoint",l),n.provide("vb:screen",v),n.provide("vb:width",k),n.provide("vb:height",p),n.provide("vb:breakpointWidth",w),n.provide("vb:screenWidth",y),n.provide("vb:orientation",u),n.provide("vb:is",W),n.provide("vb:resizeEvent",_);const x=()=>{window.addEventListener("resize",m),window.dispatchEvent(new Event("resize"))},P=()=>{window.removeEventListener("resize",m)};x(),e.watchEffect(()=>()=>{P()})}};function T(){const n=e.inject("vb:breakpoints",{}),o=e.inject("vb:screens",{}),s=e.ref(e.inject("vb:breakpoint","")),c=e.ref(e.inject("vb:screen","")),g=e.ref(e.inject("vb:width",0)),l=e.ref(e.inject("vb:height",0)),v=e.ref(e.inject("vb:breakpointWidth",0)),k=e.ref(e.inject("vb:screenWidth",0)),p=e.ref(e.inject("vb:orientation",null)),w=e.ref(e.inject("vb:is",{})),y=e.ref(e.inject("vb:resizeEvent",{}));return{breakpoint:s,screen:c,width:g,height:l,breakpointWidth:v,screenWidth:k,orientation:p,breakpoints:n,screens:o,is:w,event:y}}f.breakpoints=O,f.useBreakpoints=T,Object.defineProperty(f,Symbol.toStringTag,{value:"Module"})});
